# Steps for building the project.
# These are common in PR builds and release builds

variables:
    # This value will be read by the version_config.json file 
    rgName : ''
    buildConfiguration: 'Release'
    testAvdInputsFile: '$(tasksRoot)/test/assets/avdinputs.json'
    # Set these variables to run AVD publish tests on required azure subscription service connection containing AVD resources.
    # Not setting these variables will leave running AVD publish test cases
    subscriptionId: ''
    emailId: ''
    clientId: ''
    clientSecret: ''
    tenantId: ''
    resourceGroupName: ''
    storageAccountName: ''
    fileShareName: ''
    hostPoolName: ''
    workSpaceName: ''
    applicationGroupName: ''

steps:
- task: NodeTool@0
  displayName: 'Use Node 16.x'
  inputs:
    versionSpec: 16.x

# Build the project
- task: PowerShell@2
  displayName: 'Build the project'
  inputs:
    filePath: '$(tasksRoot)/build.ps1'
    arguments: 'BuildForProduction'

# Run the tests
- task: NuGetCommand@2
  displayName: 'Restore NuGet packages for test project'
  inputs:
    restoreSolution: '$(tasksRoot)/test/assets/HelloWorldUWPApp/HelloWorldApp.sln'

- task: PowerShell@2
  displayName: "Set AVD Config input data for avd publish tests" 
  inputs:
    targetType: 'inline'
    script: |
      $avdInputsConfigData = (Get-Content -Path $testAvdInputsFile) | ConvertFrom-Json
      $avdInputsConfigData.connectedServiceNameARM = $subscriptionId
      $avdInputsConfigData.clientId = $clientId
      $avdInputsConfigData.clientSecret = $clientSecret
      $avdInputsConfigData.tenantId = $tenantId
      $avdInputsConfigData.emailId = $emailId
      $avdInputsConfigData.resourceGroupName = $resourceGroupName
      $avdInputsConfigData.storageAccountName = $storageAccountName
      $avdInputsConfigData.fileShareName = $fileShareName
      $avdInputsConfigData.hostPoolName = $hostPoolName
      $avdInputsConfigData.workSpaceName = $workSpaceName
      $avdInputsConfigData.applicationGroupName = $applicationGroupName
      $avdInputsConfigData | ConvertTo-Json | Set-Content -Path $testAvdInputsFile

- powershell: |
    npx mocha
  displayName: 'Run the tests'
  workingDirectory: '$(tasksRoot)'
  env:
    SYSTEM_CULTURE: 'en-US'

# Code analysis tasks required by policy
# Note that CodeQL is a heavy task that is recommended to run in a separate pipeline
# and only weekly. We include it here as the project is small enough as to not
# make much of a difference, but we may need to separate it in the future.
- task: Semmle@1
  displayName: 'Run CodeQL (Semmle) scan'
  inputs:
    sourceCodeDirectory: '$(tasksRoot)'
    language: 'tsandjs'
    querySuite: 'Recommended'
    timeout: '1800'
    ram: '16384'
    addProjectDirToScanningExclusionList: true
  env:
    # Required to publish the result
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PublishSecurityAnalysisLogs@3
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'

- task: CredScan@3
  displayName: 'Run CredScan'

- task: ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'

- task: PublishSecurityAnalysisLogs@3
  displayName: 'Publish Security Analysis Logs'
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'
